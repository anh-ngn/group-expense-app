// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package repository

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, avatar_url)
VALUES ($1, $2, $3)
RETURNING id, email, created_at
`

type CreateUserParams struct {
	Email        string
	PasswordHash sql.NullString
	AvatarUrl    sql.NullString
}

type CreateUserRow struct {
	ID        int32
	Email     string
	CreatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash, arg.AvatarUrl)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const createUserWithApple = `-- name: CreateUserWithApple :one
INSERT INTO users (email, apple_id, avatar_url)
VALUES ($1, $2, $3)
RETURNING id, email, created_at
`

type CreateUserWithAppleParams struct {
	Email     string
	AppleID   sql.NullString
	AvatarUrl sql.NullString
}

type CreateUserWithAppleRow struct {
	ID        int32
	Email     string
	CreatedAt sql.NullTime
}

func (q *Queries) CreateUserWithApple(ctx context.Context, arg CreateUserWithAppleParams) (CreateUserWithAppleRow, error) {
	row := q.db.QueryRowContext(ctx, createUserWithApple, arg.Email, arg.AppleID, arg.AvatarUrl)
	var i CreateUserWithAppleRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const createUserWithGoogle = `-- name: CreateUserWithGoogle :one
INSERT INTO users (email, google_id, avatar_url)
VALUES ($1, $2, $3)
RETURNING id, email, created_at
`

type CreateUserWithGoogleParams struct {
	Email     string
	GoogleID  sql.NullString
	AvatarUrl sql.NullString
}

type CreateUserWithGoogleRow struct {
	ID        int32
	Email     string
	CreatedAt sql.NullTime
}

func (q *Queries) CreateUserWithGoogle(ctx context.Context, arg CreateUserWithGoogleParams) (CreateUserWithGoogleRow, error) {
	row := q.db.QueryRowContext(ctx, createUserWithGoogle, arg.Email, arg.GoogleID, arg.AvatarUrl)
	var i CreateUserWithGoogleRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const createUserWithMicrosoft = `-- name: CreateUserWithMicrosoft :one
INSERT INTO users (email, microsoft_id, avatar_url)
VALUES ($1, $2, $3)
RETURNING id, email, created_at
`

type CreateUserWithMicrosoftParams struct {
	Email       string
	MicrosoftID sql.NullString
	AvatarUrl   sql.NullString
}

type CreateUserWithMicrosoftRow struct {
	ID        int32
	Email     string
	CreatedAt sql.NullTime
}

func (q *Queries) CreateUserWithMicrosoft(ctx context.Context, arg CreateUserWithMicrosoftParams) (CreateUserWithMicrosoftRow, error) {
	row := q.db.QueryRowContext(ctx, createUserWithMicrosoft, arg.Email, arg.MicrosoftID, arg.AvatarUrl)
	var i CreateUserWithMicrosoftRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const getUserByAppleID = `-- name: GetUserByAppleID :one
SELECT id, email, password_hash, apple_id, google_id, microsoft_id, avatar_url, created_at
FROM users
WHERE apple_id = $1
`

type GetUserByAppleIDRow struct {
	ID           int32
	Email        string
	PasswordHash sql.NullString
	AppleID      sql.NullString
	GoogleID     sql.NullString
	MicrosoftID  sql.NullString
	AvatarUrl    sql.NullString
	CreatedAt    sql.NullTime
}

func (q *Queries) GetUserByAppleID(ctx context.Context, appleID sql.NullString) (GetUserByAppleIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByAppleID, appleID)
	var i GetUserByAppleIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.AppleID,
		&i.GoogleID,
		&i.MicrosoftID,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, google_id, avatar_url, created_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID           int32
	Email        string
	PasswordHash sql.NullString
	GoogleID     sql.NullString
	AvatarUrl    sql.NullString
	CreatedAt    sql.NullTime
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT id, email, password_hash, apple_id, google_id, microsoft_id, avatar_url, created_at
FROM users
WHERE google_id = $1
`

type GetUserByGoogleIDRow struct {
	ID           int32
	Email        string
	PasswordHash sql.NullString
	AppleID      sql.NullString
	GoogleID     sql.NullString
	MicrosoftID  sql.NullString
	AvatarUrl    sql.NullString
	CreatedAt    sql.NullTime
}

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID sql.NullString) (GetUserByGoogleIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByGoogleID, googleID)
	var i GetUserByGoogleIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.AppleID,
		&i.GoogleID,
		&i.MicrosoftID,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByMicrosoftID = `-- name: GetUserByMicrosoftID :one
SELECT id, email, password_hash, apple_id, google_id, microsoft_id, avatar_url, created_at
FROM users
WHERE microsoft_id = $1
`

type GetUserByMicrosoftIDRow struct {
	ID           int32
	Email        string
	PasswordHash sql.NullString
	AppleID      sql.NullString
	GoogleID     sql.NullString
	MicrosoftID  sql.NullString
	AvatarUrl    sql.NullString
	CreatedAt    sql.NullTime
}

func (q *Queries) GetUserByMicrosoftID(ctx context.Context, microsoftID sql.NullString) (GetUserByMicrosoftIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByMicrosoftID, microsoftID)
	var i GetUserByMicrosoftIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.AppleID,
		&i.GoogleID,
		&i.MicrosoftID,
		&i.AvatarUrl,
		&i.CreatedAt,
	)
	return i, err
}
